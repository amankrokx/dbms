// Text to speech
public static TextToSpeech tts;
tts = new TextToSpeech(getApplicationContext(), status -> {
    if (status != TextToSpeech.ERROR) {
        tts.setLanguage(Locale.UK);
        tts.speak("Hello", TextToSpeech.QUEUE_FLUSH, null);
    }
});

// Timeouts
new Handler().postDelayed(() -> {
            
}, 3000);

// Change wallpaper
WallpaperManager mwm  =  WallpaperManager.getInstance(getApplicationContext());
try {
    mwm.setResource(R.drawable.five);
} catch (IOException e) {}

// addn bundle to intent
Intent intent = new Intent(getApplicationContext(), MainActivity.class);
intent.putExtra("key", "value");
startActivity(intent);

// get bundle from intent
Bundle bundle = getIntent().getExtras();
String value = bundle.getString("key");

// XmlToJson
XmlToJson xmlToJson = new XmlToJson.Builder(xmlString).build();
// convert to a Json String
String jsonString = xmlToJson.toString();
// convert to a formatted Json String
String formatted = xmlToJson.toFormattedString();

// JsonToXml
JsonToXml jsonToXml = new JsonToXml.Builder(jsonString).build();
// convert to a xml String
String xmlString = jsonToXml.toString();
// convert to a formatted xml String
String formatted = jsonToXml.toFormattedString(2);

/*
// PROJECT LEVEL build.gradle
allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }		// add this line
    }
}
*/

/*
// APP LEVEL build.gradle
dependencies {
    implementation 'com.github.smart-fun:XmlToJson:1.5.3'    // add this line
}
*/


public static double eval(final String str) {
    return new Object() {
        int pos = -1, ch;
        
        void nextChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }
        
        boolean eat(int charToEat) {
            while (ch == ' ') nextChar();
            if (ch == charToEat) {
                nextChar();
                return true;
            }
            return false;
        }
        
        double parse() {
            nextChar();
            double x = parseExpression();
            if (pos < str.length()) throw new RuntimeException("Unexpected: " + (char)ch);
            return x;
        }
        
        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)` | number
        //        | functionName `(` expression `)` | functionName factor
        //        | factor `^` factor
        
        double parseExpression() {
            double x = parseTerm();
            for (;;) {
                if      (eat('+')) x += parseTerm(); // addition
                else if (eat('-')) x -= parseTerm(); // subtraction
                else return x;
            }
        }
        
        double parseTerm() {
            double x = parseFactor();
            for (;;) {
                if      (eat('*')) x *= parseFactor(); // multiplication
                else if (eat('/')) x /= parseFactor(); // division
                else return x;
            }
        }
        
        double parseFactor() {
            if (eat('+')) return +parseFactor(); // unary plus
            if (eat('-')) return -parseFactor(); // unary minus
            
            double x;
            int startPos = this.pos;
            if (eat('(')) { // parentheses
                x = parseExpression();
                if (!eat(')')) throw new RuntimeException("Missing ')'");
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
                x = Double.parseDouble(str.substring(startPos, this.pos));
            } else if (ch >= 'a' && ch <= 'z') { // functions
                while (ch >= 'a' && ch <= 'z') nextChar();
                String func = str.substring(startPos, this.pos);
                if (eat('(')) {
                    x = parseExpression();
                    if (!eat(')')) throw new RuntimeException("Missing ')' after argument to " + func);
                } else {
                    x = parseFactor();
                }
                if (func.equals("sqrt")) x = Math.sqrt(x);
                else if (func.equals("sin")) x = Math.sin(Math.toRadians(x));
                else if (func.equals("cos")) x = Math.cos(Math.toRadians(x));
                else if (func.equals("tan")) x = Math.tan(Math.toRadians(x));
                else throw new RuntimeException("Unknown function: " + func);
            } else {
                throw new RuntimeException("Unexpected: " + (char)ch);
            }
            
            if (eat('^')) x = Math.pow(x, parseFactor()); // exponentiation
            
            return x;
        }
    }.parse();
}
Implement an Ethernet LAN using n nodes and set multiple traffic nodes and plot congestion window for different source /destination.

OVERVIEW

Network congestion in data networking is the reduced quality of service that occurs when a network node or link is carrying more data than it can handle. Typical effects include queuing delay, packet loss or the blocking of new connections.

TCP Slow Start is part of the congestion control algorithms put in place by TCP to help control the amount of data flowing through to a network. This helps regulate the case where too much data is sent to a network and the network is incapable of processing that amount of data, thus resulting in network congestion. 

When transmission of data from sender to receiver begins in a network, there may be unknown conditions as to what the network can handle. Slow Start helps to mitigate the pitfalls of this unknown by implementing the following functionality.

    1. A sender begins transmissions to a receiver by slowly probing the network with a packet that contains its initial congestion window (cwnd).

    2. The client receives the packet and replies with its maximum buffer size, also known as the receiver’s advertised window (rwnd).

    3. If the sender receives an acknowledgement (ACK) from the client, it then doubles the amount of packets to send to the client.

    4. Step 3 is repeated until the sender no longer receives ACK from the receiver which means either congestion is detected, or the client’s window limit has been reached.

Topology                    Congestion graph

n0

n1

n2

n3

|

|

|

|

Program

#include "ns3/core-module.h" #include "ns3/network-module.h" #include "ns3/internet-module.h" #include"ns3/applications-module.h" #include <iostream>

#include "ns3/csma-module.h"

#include "ns3/network-application-helper.h" using namespacens3;

NS_LOG_COMPONENT_DEFINE ("3rd LabProgram"); using namespacens3;

NS_LOG_COMPONENT_DEFINE ("3rd Lab Program");

int

main (int argc, char *argv[])

{

CommandLinecmd; cmd.Parse (argc,argv);

NS_LOG_INFO ("Createnodes."); NodeContainernodes;

nodes.Create (4); //4 csma nodes are created

CsmaHelpercsma;

csma.SetChannelAttribute ("DataRate", StringValue ("5Mbps")); csma.SetChannelAttribute("Delay",TimeValue(MilliSeconds(0.0001)));

NetDeviceContainer devices; devices = csma.Install(nodes);

//RateErrorModel allows us to introduce errors into a Channel at a given rate.

Ptr<RateErrorModel>em = CreateObject<RateErrorModel> ();

em->SetAttribute ("ErrorRate", DoubleValue (0.00001));

devices.Get (1)->SetAttribute ("ReceiveErrorModel", PointerValue (em));

InternetStackHelperstack; stack.Install (nodes);

Ipv4AddressHelper address;

address.SetBase ("10.1.1.0", "255.255.255.0");

Ipv4InterfaceContainerinterfaces=address.Assign(devices); uint16_t sinkPort =8080;

AddresssinkAddress(InetSocketAddress(interfaces.GetAddress(1), sinkPort));

//PacketSink Application is used on the destination node to receiveTCP

//connections and data. Creates objects in an abstract way and associates

//type-id along with the object.

PacketSinkHelperpacketSinkHelper("ns3::TcpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), sinkPort));

//Install sinkapp on node 1

ApplicationContainersinkApps=packetSinkHelper.Install(nodes.Get(1)); sinkApps.Start (Seconds(0.));

sinkApps.Stop (Seconds(20.));

//next two lines of code will create the socket and connect the trace source.

Ptr<Socket>ns3TcpSocket=Socket::CreateSocket(nodes.Get(0), TcpSocketFactory::GetTypeId());

ns3TcpSocket->TraceConnectWithoutContext("CongestionWindow",MakeCallback (&CwndChange));

//creates an Object of type NetworkApplication (Class present innetwork-

//application-helper.h)

Ptr<NetworkApplication> app = CreateObject<NetworkApplication> ();

//Next statement tells the Application what Socket to use, what address to

//connect to, how much data to send at each send event, how many send events

//to generate and the rate at which to produce data from thoseevents.

app->Setup(ns3TcpSocket,sinkAddress,1040,1000,DataRate("50Mbps")); nodes.Get (0)->AddApplication(app);

app->SetStartTime (Seconds(1.));

app->SetStopTime (Seconds(20.));

//Displays packet drop msg

devices.Get (1)->TraceConnectWithoutContext("PhyRxDrop", MakeCallback (&RxDrop));

AsciiTraceHelperascii;

csma.EnableAsciiAll(ascii.CreateFileStream("3lan.tr")); csma.EnablePcapAll (std::string ("3lan"), true);

Simulator::Stop (Seconds(20)); Simulator::Run (); Simulator::Destroy ();

return 0;

}

./waf - - run scratch/Program3 - -vis Output

Redirect the output to a file called cwnd.dat

./waf --run scratch/Program3 > cwnd.dat 2>&1 Now run gnuplot

gnuplot> set terminal png size 640,480 gnuplot> set output "cwnd.png"

gnuplot> plot "cwnd.dat" using 1:2 title 'Congestion Window' with linespointsgnuplot> exit

C

w n d V

a l u e s

i n

b  i t s

Time in seconds

